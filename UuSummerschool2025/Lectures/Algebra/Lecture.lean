/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import UuSummerschool2025.Lectures.Analysis.Lecture
import Mathlib.Tactic.Ring
import Mathlib.Data.Real.Basic
import Mathlib.Data.Complex.Trigonometric
import Mathlib.Data.Nat.Cast.Field/-!
/-!
# Algebraic structures and typeclasses

In this lecture we cover algebraic structures and typeclasses. We will cover:

- `structure`s
- type `class`es
- algebraic hierarchy in mathlib
- quotients
-/

noncomputable section

namespace Playground

section Structures

/-
We can define a new type by using the `structure` keyword.
-/
structure PointOnCircle where
  x : ‚Ñù
  y : ‚Ñù
  h : x ^ 2 + y ^ 2 = 1

/- To define a term of `PointOnCircle`, we can use the `where` keyword, ... -/
def northPole : PointOnCircle where
  x := 0
  y := 1
  h := by simp

/- ... or the `{ ... }` syntax. -/
example : PointOnCircle :=
  { x := Real.sqrt 2 / 2
    y := Real.sqrt 2 / 2
    h := by rw [div_pow]; norm_num }

/- We can inspect the fields of a structure using `#print`. -/
#print PointOnCircle

/- We can access the fields of a structure using the names of the fields, e.g.: -/
example (p : PointOnCircle) : ‚Ñù :=
  p.x + p.y * 2

/-
Let us now consider something more useful.
-/

/--
A multiplicative structure is a

- underlying type `carrier`
- a multiplication `mul : carrier ‚Üí carrier ‚Üí carrier`
- a distinguished element `one : carrier`
- an inversion function `inv : carrier ‚Üí carrier`.

(This does not assume any axioms for compatibilities between these operations!)

We use the `structure` keyword to define a new type.
-/
structure Mul where
  carrier : Type
  mul : carrier ‚Üí carrier ‚Üí carrier
  one : carrier
  inv : carrier ‚Üí carrier

/- `Mul` is a new type, the "type of multiplicative structues". -/
#check Mul

/- We can use `#print` to inspect the fields of a structure. -/
#print Mul

/-
This allows to write `‚ãÑ` for multiplication, `ùüô` for the identity element and
`inv` for the inverse.
-/
notation3:70 x:70 " ‚ãÑ " y:71 => Mul.mul _ x y
notation3 "ùüô" => Mul.one _
notation3:71 x:80 "‚Åª¬π'" => Mul.inv _ x

/--
A group is a multiplicative structure with the usual axioms, i.e.
- associativity: `(x ‚ãÑ y) ‚ãÑ z = x ‚ãÑ (y ‚ãÑ z)`,
- `ùüô` is an identity on the left,
- `inv x ‚ãÑ x = ùüô` for all `x`.

We use the `extends` keyword to make a new `structure` extending `Mul`.
-/
structure Group extends Mul where
  mul_assoc (x y z : carrier) : (x ‚ãÑ y) ‚ãÑ z = x ‚ãÑ (y ‚ãÑ z)
  one_mul (x : carrier) : ùüô ‚ãÑ x = x
  inv_mul_cancel (x : carrier) : inv x ‚ãÑ x = ùüô

/- Note that `Group` has both the fields of `Mul` and the one specified in `Group`. -/
#print Group

/- ignore this for now -/
instance : CoeSort Group Type where
  coe G := G.carrier

lemma mul_assoc {G : Group} (x y z : G) : (x ‚ãÑ y) ‚ãÑ z = x ‚ãÑ (y ‚ãÑ z) :=
  G.mul_assoc x y z

/- We use `@[simp]` to add a lemma to the simplifier. -/
@[simp]
lemma one_mul {G : Group} (x : G) : ùüô ‚ãÑ x = x :=
  G.one_mul x

@[simp]
lemma inv_mul_cancel {G : Group} (x : G) : x‚Åª¬π' ‚ãÑ x = ùüô :=
  G.inv_mul_cancel x

/--
If `G` is a group, then also `x ‚ãÑ x‚Åª¬π' = ùüô`.
(Note: in the definition we asked for `x‚Åª¬π' ‚ãÑ x = ùüô`.
-/
@[simp]
lemma Group.mul_inv_cancel {G : Group} (x : G) : x ‚ãÑ x‚Åª¬π' = ùüô := by
  calc x ‚ãÑ x‚Åª¬π' = ùüô ‚ãÑ (x ‚ãÑ x‚Åª¬π') := by rw [one_mul]
               _ = ((x ‚ãÑ x‚Åª¬π')‚Åª¬π' ‚ãÑ (x ‚ãÑ x‚Åª¬π')) ‚ãÑ (x ‚ãÑ x‚Åª¬π') := by rw [inv_mul_cancel]
               _ = (x ‚ãÑ x‚Åª¬π')‚Åª¬π' ‚ãÑ (x ‚ãÑ ((x‚Åª¬π' ‚ãÑ x) ‚ãÑ x‚Åª¬π')) := by simp only [mul_assoc]
               _ = ùüô := by simp

@[simp]
lemma Group.mul_one {G : Group} (x : G) : x ‚ãÑ ùüô = x := by
  rw [‚Üê inv_mul_cancel _ x, ‚Üê mul_assoc, mul_inv_cancel, one_mul]

/-
The non-zero elements of `‚Ñù` form a group.

We use the `where` keyword to define terms of a structure.
-/
def units : Group where
  carrier := ‚ÑùÀ£
  mul x y := x * y
  one := 1
  inv x := x‚Åª¬π
  mul_assoc := _root_.mul_assoc
  one_mul := by simp
  inv_mul_cancel := by simp

/- `‚ÑùÀ£` is not only a group, but also an ordered type. -/

structure Order where
  /-- The underlying type. -/
  carrier : Type
  /-- The `‚â§` relation -/
  le : carrier ‚Üí carrier ‚Üí Prop

/- What do we do to say `RÀ£` is a group with an ordering? -/

def units‚ÇÇ : Order where
  carrier := ‚ÑùÀ£
  le := (¬∑ ‚â§ ¬∑)

structure GroupAndOrder extends Group, Order

def units‚ÇÉ : GroupAndOrder where
  carrier := ‚ÑùÀ£
  mul x y := x * y
  one := 1
  inv x := x‚Åª¬π
  mul_assoc := _root_.mul_assoc
  one_mul := by simp
  inv_mul_cancel := by simp
  le := (¬∑ ‚â§ ¬∑)

/- This becomes very tedious! New attempt! -/

namespace NewAttempt

structure Mul‚ÇÇ (G : Type) where
  mul : G ‚Üí G ‚Üí G

structure Order‚ÇÇ (G : Type) where
  le : G ‚Üí G ‚Üí Prop
  le_rfl (g : G) : le g g

def mulUnits : Mul‚ÇÇ ‚ÑùÀ£ where
  mul x y := x * y

def orderUnits : Order‚ÇÇ ‚ÑùÀ£ where
  le x y := x ‚â§ y
  le_rfl := by simp

scoped notation3:70 x:70 " ‚ãÑ " y:71 => Mul‚ÇÇ.mul _ x y

/-
Uncomment the following and observe the error message:

example {G : Type} (m : Mul‚ÇÇ G) (x y z : G) :
    (x ‚ãÑ y) ‚ãÑ z = x ‚ãÑ (y ‚ãÑ z) :=
  sorry

Lean complains, that it does not know which multiplication structure it should use on `G`!
-/

end NewAttempt

/-
We would like to have a mechanism that let's Lean automatically figure out
which multiplicative structure on `G` it should use when it sees `x ‚ãÑ y`.
-/

/-
This mechanism is called type classes.

The syntax for defining a `class` is the same as the one for `structure`s.
Only `structure` is replaced by `class`.
-/
class Mul‚ÇÉ (G : Type) where
  mul : G ‚Üí G ‚Üí G

notation3:70 x:70 " ‚ãÑ " y:71 => Mul‚ÇÉ.mul x y

class Semigroup (G : Type) extends Mul‚ÇÉ G where
  mul_assoc (x y z : G) : (x ‚ãÑ y) ‚ãÑ z = x ‚ãÑ (y ‚ãÑ z)

/- To declare a semigroup structure on `RÀ£` as an instance, use the `instance` keyword. -/
instance : Semigroup ‚ÑùÀ£ where
  mul x y := x * y
  mul_assoc := _root_.mul_assoc

lemma eq_mul (x y : ‚ÑùÀ£) : x ‚ãÑ y = x * y := rfl

/-
To assume `G` has the structure of some `class`, use `[ ... ]` instead of `( ... )`.
The hypothesis does not have to be named.
-/
example (G : Type) [Semigroup G] (x y z w : G) :
    (x ‚ãÑ y) ‚ãÑ (z ‚ãÑ w) = x ‚ãÑ (y ‚ãÑ z) ‚ãÑ w := by
  simp [Semigroup.mul_assoc]

/- A very common mistake. -/
/--
error: tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  ?x ‚ãÑ ?y
x : ‚ÑùÀ£
inst‚úù : Semigroup ‚ÑùÀ£
‚ä¢ 1 ‚ãÑ x = x
-/
#guard_msgs in
example (x : ‚ÑùÀ£) [Semigroup ‚ÑùÀ£] : 1 ‚ãÑ x = x := by
  rw [eq_mul]
  simp

/- The problem is that by assuming `[Semigroup ‚ÑùÀ£]`, we put a second, completely
unrelated semigroup structure on `‚ÑùÀ£` that we know nothing about. -/

/-
Typeclasses operate under the assumption that there is only ever one unique instance
on a type.

Problem: How about rings? A ring has two semigroup structures, one for addition and one for
multiplication!

`mathlib`s solution: distinguish `Semigroup` and `AddSemigroup`.
-/

end Structures

end Playground

section Hierarchy

/-
Let us now look at `mathlib`s own algebraic typeclasses:
-/

#check Mul
#check Semigroup
#check Monoid
#check Group
#check CommGroup

/- and the same for additive, so e.g. -/

#check AddGroup

end Hierarchy

namespace Quotients

/-
Besides the `structure` command, there is a different way to construct new types:
By taking quotients by equivalence relations.
-/

/-- A relation on integers: Two integers are equivalent if and only if their difference is
divisible by `n`. -/
def Rel (n : ‚Ñ§) (x y : ‚Ñ§) : Prop := n ‚à£ x - y

/-- `Rel` is an equivalence relation. -/
lemma Rel.equivalence (n : ‚Ñ§) : Equivalence (Rel n) where
  refl x := by simp [Rel]
  symm {x y} hxy := by
    dsimp [Rel] at *
    rw [dvd_sub_comm]
    exact hxy
  trans {x y z} hxy hyz := by
    dsimp [Rel] at *
    obtain ‚ü®k, hk‚ü© := hxy
    obtain ‚ü®m, hm‚ü© := hyz
    use k + m
    linarith

/-- An equivalence relation on `‚Ñ§`. -/
def modSetoid (n : ‚Ñ§) : Setoid ‚Ñ§ where
  r := Rel n
  iseqv := Rel.equivalence n

/-- The type of integers modulo `n`: The quotient of `‚Ñ§` by the relation `Rel`. -/
abbrev Mod (n : ‚Ñ§) : Type :=
  Quotient (modSetoid n)

/-- An addition on the integers modulo `n`. -/
instance (n : ‚Ñ§) : Add (Mod n) where
  add := by
    /- We use the universal property of the quotient: To define a function out of `Mod n`, it suffices
    to define a function out of `‚Ñ§` that is constant on equivalence classes.
    `‚ü¶x‚üß` (type with `\[[` and `\]]`) is notation for the image of `x` in the quotient `Mod n`.
    -/
    apply Quotient.lift‚ÇÇ (fun x y ‚Ü¶ ‚ü¶x + y‚üß)
    intro x y z w hxz hyw
    obtain ‚ü®k, hk‚ü© := hxz
    obtain ‚ü®m, hm‚ü© := hyw
    /- To show two representatives are equal in the quotient, it suffices to show they are related. -/
    apply Quotient.sound
    use k + m
    linarith

end Quotients
